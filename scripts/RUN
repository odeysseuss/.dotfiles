#!/usr/bin/env bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

set -e

section() {
    echo -e "\n${BLUE}===${NC} ${GREEN}$1${NC} ${BLUE}===${NC}"
}

status() {
    echo -e "${YELLOW}➔ $1${NC}"
}

success() {
    echo -e "${GREEN}✓ $1${NC}"
}

error() {
    echo -e "${RED}✗ $1${NC}" >&2
}

show_help() {
    echo -e "${YELLOW}Usage:${NC}"
    echo -e "$0 --help"
    echo -e "$0 <name> <email> <ssh_keyname> <passphrase>"
    echo "1. git config --global user.name \$NAME"
    echo "2. git config --global user.email \$EMAIL"
    echo "3. \$HOME/.ssh/<keyname>"
    echo "4. ssh passphrase"
    echo -e "\n${YELLOW}Warning!${NC} If arguments are not provided properly, setup will abort\n"
}

if [[ "$1" == "--help" ]]; then
    show_help
    exit 0
fi

if [ $# -ne 4 ]; then
    error "Error: All 4 arguments need to be provided"
    show_help
    exit 1
fi

NAME=$1
EMAIL=$2
KEY_NAME="$3"
PASSPHRASE="$4"

section "Development Environment Setup"
echo ""

section "System Update & Package Installation"
status "Updating system and installing packages..."
pacman -Syu --needed --noconfirm || {
    error "Failed to update system and install packages"
    exit 1
}

status "Installing necessary packages..."
curl -fsSL "https://raw.githubusercontent.com/ridwanalmahmud/.dotfiles/refs/heads/master/scripts/setup/install.sh" | sh || {
    error "Failed to run dotfiles install script"
    exit 1
}
success "System updated and packages installed"

section "ZSH Configuration"
status "Changing default shell..."
echo $(which zsh) | tee -a /etc/shells
chsh -s $(which zsh) || {
    error "Failed to change default shell to zsh"
    exit 1
}

status "Installing Oh My Zsh..."
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" || {
    error "Failed to install Oh My Zsh"
    exit 1
}

status "Installing zsh plugins..."
echo "" >"$HOME/.zshrc"
git clone https://github.com/zsh-users/zsh-autosuggestions "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}"/plugins/zsh-autosuggestions || {
    error "Failed to clone zsh-autosuggestions"
    exit 1
}
success "Zsh configurations updated..."

section "Dotfiles Setup"
status "Cloning dotfiles repository..."
git clone https://github.com/ridwanalmahmud/.dotfiles.git || {
    error "Failed to clone dotfiles repository"
    exit 1
}

status "Installing fonts..."
"$HOME/.dotfiles/fonts/fonts.sh" || {
    error "Failed to install fonts"
    exit 1
}

status "Creating symlinks..."
"$HOME/.dotfiles/scripts/setup/symlinks.sh" --overwrite-all || {
    error "Failed to create symlinks"
    exit 1
}

status "Running build script..."
"$HOME/.dotfiles/scripts/setup/build.sh" || {
    error "Build script failed"
    exit 1
}

status "Installing hyprland..."
"$HOME/.dotfiles/hyprland/install.sh" || {
    error "Hyprland install script failed"
    exit 1
}
success "Setup complete"

section "Git Configuration"
status "Setting up git..."
git config --global user.name "$NAME" || {
    error "Failed to set git user.name"
    exit 1
}
git config --global user.email "$EMAIL" || {
    error "Failed to set git user.email"
    exit 1
}
git config --global init.defaultBranch master || {
    error "Failed to set git default branch"
    exit 1
}
success "Git configured successfully"

section "SSH Key Setup"
status "Creating SSH directory..."
mkdir -p "$HOME/.ssh" || {
    error "Failed to create .ssh directory"
    exit 1
}
chmod 700 "$HOME/.ssh"

if [ -f "$HOME/.ssh/$KEY_NAME" ]; then
    error "SSH key already exists at $HOME/.ssh/$KEY_NAME"
    exit 1
fi

# generate key
status "Generating new SSH key..."
ssh-keygen -t ed25519 -f "$HOME/.ssh/$KEY_NAME" -C "$EMAIL" -N "" || {
    error "Failed to generate SSH key"
    exit 1
}

# add passphrase
status "Adding passphrase to SSH key..."
expect <<EOF
    spawn ssh-keygen -p -f "$HOME/.ssh/$KEY_NAME"
    expect "Enter new passphrase (empty for no passphrase):"
    send -- "$PASSPHRASE\r"
    expect "Enter same passphrase again:"
    send -- "$PASSPHRASE\r"
    expect eof
EOF

# ensure ssh-agent is running and configured in shell startup
status "Configuring SSH agent persistence..."
cat >>"$HOME/.zshrc" <<EOL

# SSH Agent Configuration
if [ -z "\$SSH_AUTH_SOCK" ] && [ -f "\$HOME/.ssh/${KEY_NAME}" ]; then
    eval "\$(ssh-agent -s)" >/dev/null
    ssh-add "\$HOME/.ssh/${KEY_NAME}" 2>/dev/null
fi
EOL

success "SSH key setup completed"

section "Setup Complete"
success "Development environment setup successfully completed!"
echo -e "\nNext steps:"
echo "1. Add your SSH key to GitHub:"
echo "   cat ~/.ssh/${KEY_NAME}.pub"
echo "2. Restart your terminal to enjoy your new environment!"

"$HOME/.dotfiles/scripts/dashboard/culers.sh"
